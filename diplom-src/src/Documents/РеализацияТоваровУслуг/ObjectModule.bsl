
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Ответственный = Пользователи.ТекущийПользователь();
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		ЗаполнитьНаОснованииЗаказаПокупателя(ДанныеЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	СуммаДокумента = Товары.Итог("Сумма") + Услуги.Итог("Сумма");
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)

	Движения.ОбработкаЗаказов.Записывать = Истина;
	Движения.ОстаткиТоваров.Записывать = Истина;
	
	Движение = Движения.ОбработкаЗаказов.Добавить();
	Движение.Период = Дата;
	Движение.Контрагент = Контрагент;
	Движение.Договор = Договор;
	Движение.Заказ = Основание;
	Движение.СуммаОтгрузки = СуммаДокумента;

	Для Каждого ТекСтрокаТовары Из Товары Цикл
		Движение = Движения.ОстаткиТоваров.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
		Движение.Период = Дата;
		Движение.Контрагент = Контрагент;
		Движение.Номенклатура = ТекСтрокаТовары.Номенклатура;
		Движение.Сумма = ТекСтрокаТовары.Сумма;
		Движение.Количество = ТекСтрокаТовары.Количество;
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьНаОснованииЗаказаПокупателя(ДанныеЗаполнения)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказПокупателя.Организация КАК Организация,
	               |	ЗаказПокупателя.Контрагент КАК Контрагент,
	               |	ЗаказПокупателя.Договор КАК Договор,
	               |	ЗаказПокупателя.СуммаДокумента КАК СуммаДокумента,
	               |	ЗаказПокупателя.Товары.(
	               |		Ссылка КАК Ссылка,
	               |		НомерСтроки КАК НомерСтроки,
	               |		Номенклатура КАК Номенклатура,
	               |		Количество КАК Количество,
	               |		Цена КАК Цена,
	               |		Сумма КАК Сумма
	               |	) КАК Товары,
	               |	ЗаказПокупателя.Услуги.(
	               |		Ссылка КАК Ссылка,
	               |		НомерСтроки КАК НомерСтроки,
	               |		Номенклатура КАК Номенклатура,
	               |		Количество КАК Количество,
	               |		Цена КАК Цена,
	               |		Сумма КАК Сумма
	               |	) КАК Услуги
	               |ИЗ
	               |	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	               |ГДЕ
	               |	ЗаказПокупателя.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Не Выборка.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
	
	ТоварыОснования = Выборка.Товары.Выбрать();
	Пока ТоварыОснования.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Товары.Добавить(), ТоварыОснования);
	КонецЦикла;
	
	УслугиОснования = Выборка.Услуги.Выбрать();
	Пока ТоварыОснования.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Услуги.Добавить(), УслугиОснования);
	КонецЦикла;
	
	Основание = ДанныеЗаполнения;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли    

//{{ВКМ. Получаем номенклатуру из констант НоменклатураАбонентскаяПлата и НоменклатураРаботыСпециалиста              
//Очистим табличную часть 
Процедура ВКМ_ВыполнитьАвтозаполнение(ОбъектДоговор) Экспорт 
    
    //ВКМ. Получаем Номенклатуру из Констант
    НоменклатураАбонентскогоОбслуживания = Константы.ВКМ_НоменклатураАбонентскаяПлата.Получить();
    НоменклатураРабот = Константы.ВКМ_НоменклатураРаботыСпециалиста.Получить();    
    
    //ВКМ. Если хотя бы одна из Констант не заполнена, то выдаем Предупреждение и прекращаем выполнение процедуры
    Если Строка(НоменклатураАбонентскогоОбслуживания) = "" ИЛИ Строка(НоменклатураРабот) = "" Тогда
        ТекстОшибки = "ОШИБКА! Константа(-ы): ""Работы включаемые в абонентское обслуживание"" и/или ""Работы не включаемые в абонентское обслуживание"" не заполнены.";
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,,,Истина);
        Возврат;
    Иначе 
        //ВКМ. Очистим табличную часть Услуги
        Услуги.Очистить();
        //ВКМ. Если в Договоре ненулевая сумма абонентской платы, то добавляем ТЧ Услуги: 
        //Номенклатуру из Константы НоменклатураАбонентскаяПлата, а Сумму абонентской платы из договора
        Если ОбъектДоговор.ВКМ_СуммаАбонентскойПлаты > 0 Тогда 
            НоваяСтрока = Услуги.Добавить();
            НоваяСтрока.Номенклатура = НоменклатураАбонентскогоОбслуживания; 
            НоваяСтрока.Сумма  = ОбъектДоговор.ВКМ_СуммаАбонентскойПлаты; 
        КонецЕсли; 
        
        СсылкаДоговор = ОбъектДоговор.Ссылка;
        ДатаС = НачалоМесяца(Дата);
        ДатаПо = КонецМесяца(Дата);
        Результат = ВКМ_ДанныеИзРегистраВыполненныеРаботы(СсылкаДоговор, ДатаС, ДатаПо);
        
        Если Результат = "Пустой" Тогда 
            ТекстОшибки = "В Регистре накопления ""Выполненные клиенту работы"" в месяце даты документа отсутствуют записи. Автозаполнение невозможно.";
            ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,,,Истина);
            Возврат;
        Иначе 
            //ВКМ. Добавляем ТЧ Услуги: 
            //Номенклатуру из Константы НоменклатураРабот, а общее количеством часов и общую сумму 
            //из Регистра накоплений ВКМ_ВыполненныеКлиентуРаботы 
            НоваяСтрока = Услуги.Добавить();
            НоваяСтрока.Номенклатура = НоменклатураРабот;
            РезультатКоличество = 0;
            РезультатСумма = 0;
            Результат.Свойство("ОбщееКоличествоЧасов", РезультатКоличество);
            Результат.Свойство("ОбщаяСумма", РезультатСумма);
            НоваяСтрока.Количество = РезультатКоличество; 
            НоваяСтрока.Сумма = РезультатСумма;
        КонецЕсли; 
    КонецЕсли;
    
КонецПроцедуры  
//}}ВКМ. 

//{{ВКМ. Запросом получаем из Регистра накоплений ВКМ_ВыполненныеКлиентуРаботы 
//по договору Количество работ и сумму
Функция ВКМ_ДанныеИзРегистраВыполненныеРаботы(СсылкаДоговор, ДатаС, ДатаПо) 
        
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |   ВКМ_ВыполненныеКлиентуРаботы.ВКМ_КоличествоЧасов КАК ВКМ_КоличествоЧасов,
    |   ВКМ_ВыполненныеКлиентуРаботы.ВКМ_СуммаКОплате КАК ВКМ_СуммаКОплате
    |ИЗ
    |   РегистрНакопления.ВКМ_ВыполненныеКлиентуРаботы КАК ВКМ_ВыполненныеКлиентуРаботы
    |ГДЕ
    |   ВКМ_ВыполненныеКлиентуРаботы.Период МЕЖДУ &ДатаС И &ДатаПо
    |   И ВКМ_ВыполненныеКлиентуРаботы.ВКМ_Договор.Ссылка = &Ссылка";
    
    Запрос.УстановитьПараметр("ДатаС", ДатаС);
    Запрос.УстановитьПараметр("ДатаПо", ДатаПо);
    Запрос.УстановитьПараметр("Ссылка", СсылкаДоговор); 
    
    РезультатЗапроса = Запрос.Выполнить();
    
    //ВКМ. Если в Регистре накопления ""Выполненные клиенту работы"" 
    //в месяце даты документа отсутствуют записи, то Возврат "Пустой"
    Если РезультатЗапроса.Пустой() Тогда 
        Результат = "Пустой";
        Возврат Результат;
    КонецЕсли; 
    
    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
    
    //ВКМ. Если в Регистре накопления ""Выполненные клиенту работы"" 
    //в месяце даты документа есть записи, то Возврат Структура с общим количеством часов и общей суммой
    ОбщееКоличествоЧасов = Число(0);
    ОбщаяСумма = Число(0);
    Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
        ОбщееКоличествоЧасов = ВыборкаДетальныеЗаписи.ВКМ_КоличествоЧасов + ОбщееКоличествоЧасов;
        ОбщаяСумма = ВыборкаДетальныеЗаписи.ВКМ_СуммаКОплате + ОбщаяСумма;
    КонецЦикла;
    
    Результат = Новый Структура;
    Результат.Вставить("ОбщееКоличествоЧасов", ОбщееКоличествоЧасов);
    Результат.Вставить("ОбщаяСумма", ОбщаяСумма);
    
    Возврат Результат;
    
КонецФункции
//}} ВКМ. 
